# Multi-stage build for Render deployment
FROM node:18-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    vips-dev \
    python3 \
    make \
    g++

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY frontend/package*.json ./frontend/
COPY backendUploader/package*.json ./backendUploader/
COPY processing-storage/package*.json ./processing-storage/

# Install root dependencies
RUN npm ci

# Install frontend dependencies
WORKDIR /app/frontend
RUN npm ci

# Build frontend
RUN npm run build

# Install backend dependencies
WORKDIR /app/backendUploader
RUN npm ci --only=production

# Install worker dependencies
WORKDIR /app/processing-storage
RUN npm ci --only=production

# Production stage
FROM node:18-alpine AS production

# Install system dependencies for production
RUN apk add --no-cache \
    vips-dev \
    python3 \
    make \
    g++

WORKDIR /app

# Copy built frontend
COPY --from=base /app/frontend/dist ./frontend/dist
COPY --from=base /app/frontend/package*.json ./frontend/

# Copy backend
COPY --from=base /app/backendUploader/node_modules ./backendUploader/node_modules
COPY backendUploader/ ./backendUploader/

# Copy worker
COPY --from=base /app/processing-storage/node_modules ./processing-storage/node_modules
COPY processing-storage/ ./processing-storage/

# Copy root files
COPY package*.json ./
COPY --from=base /app/node_modules ./node_modules

# Create necessary directories
RUN mkdir -p logs uploads/temp

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Change ownership
RUN chown -R nodejs:nodejs /app
USER nodejs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
CMD ["node", "backendUploader/src/server.js"]


