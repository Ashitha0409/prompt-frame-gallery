# Multi-stage build for Railway deployment
FROM node:18-alpine as base

# Install system dependencies
RUN apk add --no-cache \
    vips-dev \
    python3 \
    make \
    g++ \
    sqlite

WORKDIR /app

# Copy root package files
COPY package*.json ./
RUN npm ci --only=production

# Backend build stage
FROM base as backend
WORKDIR /app/backend
COPY backendUploader/package*.json ./
RUN npm ci --only=production
COPY backendUploader/ ./

# Frontend build stage  
FROM base as frontend
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci
COPY frontend/ ./
RUN npm run build

# Processing worker build stage
FROM base as worker
WORKDIR /app/worker
COPY processing-storage/package*.json ./
RUN npm ci --only=production
COPY processing-storage/ ./

# Final production image
FROM node:18-alpine as production
RUN apk add --no-cache \
    vips-dev \
    sqlite \
    && addgroup -g 1001 -S nodejs \
    && adduser -S nodejs -u 1001

WORKDIR /app

# Copy built applications
COPY --from=backend --chown=nodejs:nodejs /app/backend ./backend
COPY --from=frontend --chown=nodejs:nodejs /app/frontend ./frontend
COPY --from=worker --chown=nodejs:nodejs /app/worker ./worker
COPY --from=base --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --chown=nodejs:nodejs package*.json ./
COPY --chown=nodejs:nodejs start-local.js ./

# Create necessary directories
RUN mkdir -p logs uploads data && chown -R nodejs:nodejs /app

USER nodejs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
CMD ["npm", "start"]
